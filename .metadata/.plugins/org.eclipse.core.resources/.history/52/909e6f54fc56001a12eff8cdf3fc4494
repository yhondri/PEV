package problems;

import java.util.Random;

import base.Utils;
import entities.Chromosome;
import utils.ByteOps;

public class Problem2 implements GenericProblem {

	private int longitud;
	private double max;
	private double min;
	
	public Problem2(double prec) {
		min = -10;
		max = 10;
		longitud = Utils.getGenotypeLength(min, max, prec) * 2;
	}
	
	public Problem2(Problem2 c) {
		min = -10;
		max = 10;
		longitud = c.getLongitud();
	}
	
	@Override
	public Chromosome getRandomChromosome() {
		Random rd = new Random();
		boolean[] genes = new boolean[longitud];
		for(int i = 0; i < longitud; i++) {
			genes[i] = rd.nextBoolean();
		}
		return new Chromosome();
	}

	public double calcFitness() {
		double parsedVal[] = decode(), fenotipo;
		fenotipo = calcHolder(parsedVal[0], parsedVal[1]);
		return -fenotipo;
	}
	
	
	public double[] decode() {
		boolean spl[][] = ByteOps.splitBitStream(getGenes());
		return new double[]{
				ByteOps.parseBitStream(spl[0], min, max, getLongitud()/2),
				ByteOps.parseBitStream(spl[1], min, max, getLongitud()/2)};
	}
	
	public static double calcHolder(double x, double y) {
		return -Math.abs(Math.sin(x)
				*Math.cos(y)
				*Math.exp(Math.abs(1 - (Math.sqrt(x*x + y*y)/Math.PI))));
	}
	
	@Override
	public double getFitness(Chromosome chromosome) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	private int getLongitud() {
		return longitud;
	}
}
